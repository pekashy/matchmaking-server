version: "3.8"
services:
  client:
    build:
      context: .
      dockerfile: client/Dockerfile
    ports:
      - "8050:8050"
    networks:
      - matchmaking-network
    links:
      - start-matchmaking-queue
      - userdata
    depends_on:
      - start-matchmaking-queue
      - userdata
    volumes:
      - ./logs:/logs
  matchmaking:
    build:
      context: .
      dockerfile: matchmaking/Dockerfile
    networks:
      - matchmaking-network
    ports:
      - "8051:8050"
    links:
      - start-matchmaking-queue
      - open-matches-db
    depends_on:
      - start-matchmaking-queue
      # - matched-games-queue
      - userdata
      # - deduplication-cache
      - open-matches-db
      - open-matches-db-conf
      # - matched-games-queue
      # - userdata
      # - deduplication-cache
    volumes:
      - ./logs:/logs
  start-matchmaking-queue:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      # AMQP protocol port
      - '5672:5672'
      # HTTP management UI
      - '15672:15672'
    networks:
      - matchmaking-network
    volumes:
      - ./logs:/logs
  transactions:
    build:
      context: ./transactions
      dockerfile: Dockerfile
    networks:
      - matchmaking-network
    depends_on:
      - matched-games-queue
      - userdata
  matched-games-queue:
    image: rabbitmq:3-management-alpine
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    ports:
      # AMQP protocol port
      - '5673:5672'
      # HTTP management UI
      - '15673:15672'
    networks:
      - matchmaking-network
  deduplication-cache:
    image: redis:7-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - ./db/data/dedup_cache:/data
    networks:
      - matchmaking-network
  userdata:
    image: mongo:6.0-focal
    restart: always
    networks:
      - matchmaking-network
    environment:
      - MONGO_DATA_DIR=/usr/data/db
      - MONGO_LOG_DIR=/dev/null
    volumes:
      - ./db/data/user_data:/usr/data/db
    ports:
      - "27017"
  open-matches-db:
    image: cassandra:4
    restart: always
    ports:
      - "9042"
    environment:
      - CASSANDRA_START_RPC=true
      - CASSANDRA_CLUSTER_NAME=LocalCluster
      - CASSANDRA_ENDPOINT_SNITCH=GossipingPropertyFileSnitch
      - CASSANDRA_DC=datacenter1
    volumes:
      - ./db/data/matches:/var/lib/cassandra/data
    networks:
      - matchmaking-network
  open-matches-db-conf:
    container_name: open-matches-db-conf
    restart: always
    image: cassandra:4
    links:
      - open-matches-db
    depends_on:
      - open-matches-db
    volumes:
      - ./db/schemas:/schemas
    entrypoint: [ "/schemas/cassandra.sh" ]
    networks:
      - matchmaking-network
networks:
  matchmaking-network:
    driver: bridge
